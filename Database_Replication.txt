                                        MASTER_SLAVE REPLICATION IN SQL


Step 1: Install MySQL Server On Server 1 (Master)
The first step is installing MySQL server on server 1 with IP address 11.11.11.11. So SSH to your server and run the below commands:

$ sudo apt-get update
$ sudo apt-get install mysql-server

$ yum install mysql-server mysql -y (For RHEL)

Press Y and hit Enter when prompted to confirm the installation.

Step 2: Edit MySQL Configuration File on Server 1
Next, edit the MySQL configuration file in order for MySQL server to allow remote access:

$ sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf
Look for the line bind-address and change its value to '0.0.0.0'.

bind-address = 127.0.0.1
Change to :

bind-address =0.0.0.0
This will cause MySQL to allow inbound connections.

Next, add the below lines near the end of that configuration file:

server-id = 1
log_bin = /var/log/mysql/mysql-bin.log
log_bin_index =/var/log/mysql/mysql-bin.log.index
relay_log = /var/log/mysql/mysql-relay-bin
relay_log_index = /var/log/mysql/mysql-relay-bin.index

***************************
Read Carefully:
1.Whenever the master's database is modified, the change is written to a file, the so-called binary log, or binlog. This is done by the client thread that executed the query that modified the database.

2.The master has a thread, called the dump thread, that continuously reads the master's binlog and sends it to the slave.

3.The slave has a thread, called the IO thread, that receives the binlog that the master's dump thread sent, and writes it to a file: the relay log.

4.The slave has another thread, called the SQL thread, that continuously reads the relay log and applies the changes to the slave server.
****************************
Press CTRL+X, Y and hit Enter to save the file.

Restart MySQL server for the changes to take effect:

$ sudo service mysql restart    
Step 3: Create a New User for Replication Services on Server 1
Next you need to create a new user that will handle replication services on server 1. So, log in to your MySQL on server 1.

$ sudo mysql -u root -p
Enter your password when prompted to do so and hit Enter to continue.

On the MySQL prompt that appears, enter the below SQL queries to create the user:

mysql > create user 'replication_user'@'%' identified by 'PASSWORD';
mysql > GRANT REPLICATION SLAVE ON *.* TO 'replication_user'@'%';
mysql > FLUSH PRIVILEGES;
Remember to replace 'PASSWORD' with a strong value for security purposes.

Before you exit the MySQL prompt, enter the command below to view information about the position and file of the Master Server

mysql> show master status; 
+------------------+----------+--------------+------------------+-------------------+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------------+----------+--------------+------------------+-------------------+
| mysql-bin.000001 |      154 |              |                  |                   |
+------------------+----------+--------------+------------------+-------------------+
1 row in set (0.00 sec)
Here, you need to note the file name, 'mysql-bin.000001' and Position '154'. You will need these details when configuring server 2. Please note, these values might be different on your server.

Step 4: Install MySQL On Server 2 (Slave)
Just like you did in the first server, you need to install MySQL server on the second server. Run the commands below:

$ sudo apt-get update
$ sudo apt-get install mysql-server
Press Y and hit Enter when prompted to confirm the installation.

Also, you will need to supply a root password for your MySQL server. Then, hit Enter on the screen that pops-up. Repeat the password one more time on the next screen for confirmation.

Step 5: Modify the Configuration File on Server 2
Next, edit the MySQL configuration file on server 2 to allow remote access:

$ sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf
Look for the line bind-address and change its value to '0.0.0.0'.

bind-address = 127.0.0.1
Change to:

bind-address =0.0.0.0
This will cause MySQL to allow inbound connections.

Next, add the below lines near the end of the file:

server-id = 2
log_bin = /var/log/mysql/mysql-bin.log
log_bin_index =/var/log/mysql/mysql-bin.log.index
relay_log = /var/log/mysql/mysql-relay-bin
relay_log_index = /var/log/mysql/mysql-relay-bin.index
Please note the server-id is '2'.

Press CTRL+X, Y and hit Enter to save the file.

Restart MySQL on server 2 for the changes to take effect:

$ sudo service mysql restart    
Step 6: Change Master-Slave Configuration on Server 2
Next, login to MySQL on server 2:

$ sudo mysql -u root -p
Enter your password and hit Enter to continue.

On the MySQL prompt that appears, enter the below details and replace IP address (11.11.11.11) with the public IP address associated with your Alibaba ECS instance running server 1.

Also, replace the 'MASTER_LOG_FILE' and 'MASTER_LOG_POS' with the information you obtained from server 1.

The MySQL username and password should also match the values you created on server 1.

mysql> stop slave; 
mysql> CHANGE MASTER TO MASTER_HOST = '11.11.11.11', MASTER_USER = 'replication_user', MASTER_PASSWORD = 'PASSWORD', MASTER_LOG_FILE = 'mysql-bin.000001', MASTER_LOG_POS = 753; 
mysql > start slave;
mysql > Quit;
Step 7: Test the Configuration
You should now test the configuration and see whether MySQL replication is working as expected. To confirm this, log in to MySQL on server 1

$ sudo mysql -u root -p
Enter your root password and hit Enter to continue.

On the MySQL prompt that appears, create a database (e.g. replica_demo ):

mysql> create database replica_demo;
Query OK, 1 row affected (0.01 sec)
Then, log in to MySQL on server 2:

$ sudo mysql -u root -p
Enter your root password and hit Enter to continue.

On the MySQL prompt that appears, type the below SQL command to list available databases:

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| replica_demo       |
| sys                |
+--------------------+
5 rows in set (0.00 sec)
The output above is for server 2 and it clearly confirms that MySQL Master-Slave replication is working as expected because the database 'replica-demo' was replicated on server 2.

Step 8: MySQL Master-Slave Proof of Concept
We can take the proof of concept further and add a table 'students' on the 'replica_demo' database on server 1:

On server 1 run the commands below on the MySQL prompt:

mysql> use replica_demo
Output

Database changed
Then create the students table with the command below:

mysql> CREATE TABLE students ( id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, student_name VARCHAR(30) NOT NULL );
Output

mysql> Query OK, 0 rows affected (0.06 sec)
You need to insert some values using the command below:

mysql> insert into students(id, student_name) values ('1001', 'John Doe');
Output

Query OK, 1 row affected (0.01 sec)
Then add another record,

mysql> insert into students(id, student_name) values ('1002', 'Mary Doe');
Output

Query OK, 1 row affected (0.03 sec)
To confirm if the changes were effected on server 2, run the commands below:

mysql> use replica_demo
Output

Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
Then, run the command below to list records on the students table:

mysql> select * from students;
+------+--------------+
| id   | student_name |
+------+--------------+
| 1001 | John Doe     |
| 1002 | Mary Doe     |
+------+--------------+
2 rows in set (0.00 sec)
That's it. The students table we created on server 1 and the list of students were successfully replicated on server 2.
